jenkins:
    # Authorization: Disable all anonymous access
    authorizationStrategy:
        globalMatrix:
            permissions:
                # Admin user permissions - full control
                - "Overall/Administer:${JENKINS_ADMIN_ID:-admin}"
                - "Overall/Read:${JENKINS_ADMIN_ID:-admin}"

                # Pipeline service account permissions - limited to job execution
                - "Overall/Read:${JENKINS_PIPELINE_ID:-pipeline}"
                - "Job/Build:${JENKINS_PIPELINE_ID:-pipeline}"
                - "Job/Cancel:${JENKINS_PIPELINE_ID:-pipeline}"
                - "Job/Configure:${JENKINS_PIPELINE_ID:-pipeline}"
                - "Job/Create:${JENKINS_PIPELINE_ID:-pipeline}"
                - "Job/Delete:${JENKINS_PIPELINE_ID:-pipeline}"
                - "Job/Discover:${JENKINS_PIPELINE_ID:-pipeline}"
                - "Job/Move:${JENKINS_PIPELINE_ID:-pipeline}"
                - "Job/Read:${JENKINS_PIPELINE_ID:-pipeline}"
                - "Job/Workspace:${JENKINS_PIPELINE_ID:-pipeline}"
                - "Run/Delete:${JENKINS_PIPELINE_ID:-pipeline}"
                - "Run/Replay:${JENKINS_PIPELINE_ID:-pipeline}"
                - "Run/Update:${JENKINS_PIPELINE_ID:-pipeline}"
                - "View/Configure:${JENKINS_PIPELINE_ID:-pipeline}"
                - "View/Create:${JENKINS_PIPELINE_ID:-pipeline}"
                - "View/Delete:${JENKINS_PIPELINE_ID:-pipeline}"
                - "View/Read:${JENKINS_PIPELINE_ID:-pipeline}"
                - "SCM/Tag:${JENKINS_PIPELINE_ID:-pipeline}"

                # General authenticated users permissions - read-only
                - "Overall/Read:authenticated"
                - "Job/Read:authenticated"
                - "View/Read:authenticated"
                # Explicitly NO permissions for anonymous users
                # Anonymous users will be redirected to login

    # Security Realm: Local user database
    securityRealm:
        local:
            allowsSignup: false # Prevent self-registration
            enableCaptcha: false
            users:
                - id: "${JENKINS_ADMIN_ID:-admin}"
                  password: "${JENKINS_ADMIN_PASSWORD:-admin}" # Set via environment variable
                  properties:
                      - mailer:
                            emailAddress: "${JENKINS_ADMIN_EMAIL:-admin@example.com}"
                - id: "${JENKINS_PIPELINE_ID:-pipeline}"
                  password: "${JENKINS_PIPELINE_PASSWORD:-pipeline123}" # Service account for pipeline execution
                  properties:
                      - mailer:
                            emailAddress: "${JENKINS_PIPELINE_EMAIL:-pipeline@example.com}"

    # Additional security settings
    remotingSecurity:
        enabled: true

    # CSRF Protection
    crumbIssuer:
        standard:
            excludeClientIPFromCrumb: false

    # Disable agent to master access control - replaces CLI setting
    slaveAgentPort: 50000

unclassified:
    location:
        url: "http://localhost:8080/"
        adminAddress: "${JENKINS_ADMIN_EMAIL:-admin@example.com}"

security:
    # API Token settings
    apiToken:
        creationOfLegacyTokenEnabled: false
        tokenGenerationOnCreationEnabled: false
        usageStatisticsEnabled: true

jobs:
    - script: >
          pipelineJob('21979741_Project2_pipeline') {
            description('Pipeline for AWS Elastic Beanstalk Express.js Sample Application')

            // Keep only recent builds
            logRotator {
              numToKeep(10)
              artifactNumToKeep(5)
            }

            // Pipeline definition from repository's Jenkinsfile
            definition {
              cpsScm {
                scm {
                  git {
                    remote {
                      url('https://github.com/endigo/aws-elastic-beanstalk-express-js-sample.git')
                    }
                    branch('*/main')
                  }
                }
                scriptPath('Jenkinsfile')  // Use the existing Jenkinsfile from the repo
                lightweight(false)
              }
            }
          }

credentials:
    system:
        domainCredentials:
            - credentials:
                  # Snyk API token for security scanning
                  - string:
                        scope: GLOBAL
                        id: "snyk-api-token"
                        secret: "${SNYK_API_TOKEN:-dummy-token}"
                        description: "Snyk API token for security scanning"
                  # Docker Hub credentials
                  - usernamePassword:
                        scope: GLOBAL
                        id: "docker-hub-credentials"
                        username: "${DOCKER_HUB_USERNAME:-dummy}"
                        password: "${DOCKER_HUB_PASSWORD:-dummy}"
                        description: "Docker Hub credentials"
